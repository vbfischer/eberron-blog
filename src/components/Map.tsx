import React, { useEffect } from "react"

import {
  Map as LeafletMap,
  ImageOverlay,
  Marker,
  Popup,
  GeoJSON,
  Polygon,
} from "react-leaflet"
import { isDomAvailable } from "lib/util"

const bounds = [
  [0, 0],
  [3548, 5033],
]
const style = { height: "475px" }

const geoJSON = {
  type: "Feature",
  properties: { nation: "Breland" },
  geometry: {
    type: "Polygon",
    coordinates: [
      [960, 794],
      [1024, 836],
      [1075, 893],
      [1123, 955],
      [1194, 1086],
      [1216, 1122],
      [1220, 1155],
      [1244, 1197],
      [1245, 1236],
      [1258, 1272],
      [1275, 1286],
      [1277, 1285],
      [1465, 1398],
      [1479, 1430],
      [1498, 1442],
      [1499, 1451],
      [1504, 1455],
      [1510, 1469],
      [1547, 1478],
      [1551, 1479],
      [1579, 1477],
      [1605, 1469],
      [1640, 1473],
      [1668, 1485],
      [1697, 1497],
      [1707, 1497],
      [1721, 1495],
      [1724, 1469],
      [1729, 1448],
      [1734, 1421],
      [1740, 1400],
      [1748, 1387],
      [1762, 1383],
      [1769, 1375],
      [1776, 1362],
      [1862, 1317],
      [1925, 1308],
      [1962, 1314],
      [1992, 1330],
      [2008, 1325],
      [2053, 1294],
      [2078, 1274],
      [2127, 1214],
      [2127, 1201],
      [2125, 1190],
      [2123, 1178],
      [2127, 1172],
      [2136, 1152],
      [2139, 1133],
      [2148, 1124],
      [2151, 1119],
      [2159, 1102],
      [2177, 1083],
      [2196, 1072],
      [2203, 1075],
      [2210, 1075],
      [2224, 1072],
      [2238, 1078],
      [2267, 1111],
      [2306, 1154],
      [2323, 1172],
      [2336, 1177],
      [2358, 1188],
      [2398, 1208],
      [2410, 1215],
      [2415, 1218],
      [2436, 1225],
      [2454, 1233],
      [2462, 1236],
      [2486, 1244],
      [2517, 1258],
      [2562, 1266],
      [2609, 1261],
      [2616, 1239],
      [2632, 1216],
      [2637, 1190],
      [2633, 1171],
      [2633, 1169],
      [2637, 1158],
      [2642, 1133],
      [2654, 1111],
      [2662, 1098],
      [2669, 1089],
      [2676, 1057],
      [2658, 1046],
      [2642, 1034],
      [2610, 1008],
      [2607, 999],
      [2604, 981],
      [2593, 964],
      [2575, 947],
      [2555, 938],
      [2510, 925],
      [2502, 920],
      [2489, 914],
      [2472, 906],
      [2438, 875],
      [2335, 848],
      [2330, 846],
      [2302, 824],
      [2295, 819],
      [2292, 815],
      [2286, 807],
      [2250, 802],
      [2226, 791],
      [2198, 762],
      [2182, 746],
      [2160, 737],
      [2100, 732],
      [2059, 728],
      [2016, 716],
      [1987, 718],
      [1946, 712],
      [1939, 712],
      [1925, 704],
      [1908, 712],
      [1907, 712],
      [1896, 712],
      [1883, 717],
      [1863, 717],
      [1848, 716],
      [1829, 716],
      [1815, 718],
      [1809, 724],
      [1793, 729],
      [1758, 716],
      [1742, 694],
      [1738, 673],
      [1734, 660],
      [1728, 647],
      [1716, 634],
      [1691, 617],
      [1686, 599],
      [1683, 582],
      [1661, 549],
      [1638, 521],
      [1637, 518],
      [1617, 483],
      [1616, 476],
      [1614, 475],
      [1604, 469],
      [1603, 458],
      [1599, 450],
      [1597, 438],
      [1593, 416],
      [1576, 339],
      [1562, 312],
      [1559, 310],
      [1549, 321],
      [1532, 328],
      [1520, 340],
      [1510, 340],
      [1501, 340],
      [1489, 342],
      [1485, 339],
      [1473, 337],
      [1466, 339],
      [1459, 344],
      [1450, 342],
      [1444, 337],
      [1434, 334],
      [1420, 327],
      [1419, 318],
      [1404, 312],
      [1411, 300],
      [1411, 295],
      [1399, 283],
      [1356, 280],
      [1343, 281],
      [1336, 275],
      [1330, 272],
      [1318, 266],
      [1306, 264],
      [1299, 270],
      [1285, 282],
      [1278, 286],
      [1275, 290],
      [1261, 310],
      [1259, 305],
      [1242, 295],
      [1237, 291],
      [1231, 291],
      [1224, 292],
      [1219, 295],
      [1214, 296],
      [1204, 298],
      [1196, 308],
      [1190, 310],
      [1111, 302],
      [1094, 301],
      [1070, 314],
      [1058, 324],
      [1049, 322],
      [1045, 322],
      [994, 317],
      [990, 316],
      [987, 317],
      [987, 330],
      [986, 333],
      [979, 338],
      [969, 349],
      [970, 359],
      [965, 374],
      [965, 385],
      [964, 387],
      [963, 394],
      [957, 401],
      [963, 417],
      [962, 422],
      [954, 430],
      [952, 440],
      [948, 444],
      [944, 447],
      [940, 456],
      [932, 465],
      [933, 475],
      [927, 481],
      [920, 486],
      [888, 557],
      [882, 576],
      [886, 589],
      [887, 595],
      [887, 604],
      [888, 610],
      [892, 633],
      [897, 638],
      [901, 640],
      [908, 649],
      [919, 668],
      [917, 670],
      [918, 677],
      [915, 691],
      [928, 725],
      [930, 734],
      [927, 742],
      [930, 750],
      [935, 750],
      [938, 759],
      [940, 761],
      [949, 765],
      [953, 782],
    ],
  },
}

const mouseOver = ({ target }) => {
  target.setStyle({
    weight: 2,
    color: "red",
    dashArray: "",
    fillOpacity: 0.2,
    stroke: true,
  })
}
const mouseOut = ({ target }) => {
  target.setStyle(defaultStyle)
}

const defaultStyle = {
  stroke: false,
  fillOpacity: 0,
}

const coordinates = geoJSON.geometry.coordinates.map(c => [c[1], c[0]])

const attribution = `<a href="https://www.google.com">Open Full Map</a>`
const onClick = e => console.log("e", e.latlng)
const Map = ({ url }) => {
  if (!isDomAvailable()) {
    return (
      <div>
        <p>Loading map...</p>
      </div>
    )
  }

  return (
    <LeafletMap
      crs={L.CRS.Simple}
      minZoom={-2}
      bounds={bounds}
      maxBounds={bounds}
      style={style}
      onclick={onClick}
      attributionControl={false}
    >
      <ImageOverlay bounds={bounds} url={url} />
      <Polygon
        {...defaultStyle}
        positions={coordinates}
        onmouseover={mouseOver}
        onmouseout={mouseOut}
        attribution=""
      />
    </LeafletMap>
  )
}

export default Map
